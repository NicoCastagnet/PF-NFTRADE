generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  passwordHash       String?
  coins              Float?       @default(0)
  erased             Boolean?     @default(false)
  admin              Boolean?     @default(false)
  accounts           Account[]
  collectionsCreated Collection[] @relation("UserCollectionsCreated")
  collectionsOwned   Collection[] @relation("UserCollectionsOwned")
  comments           Comment[]
  nftsCreated        Nft[]        @relation("UserNftsCreated")
  nftsOwned          Nft[]        @relation("UserNftsOwned")
  sessions           Session[]
  wishes             WishList[]
  likes              Nft[]        @relation("UserLikedNfts")
  views              Nft[]        @relation("UserViewedNfts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Nft {
  id           String      @id @default(cuid())
  creatorId    String
  ownerId      String
  name         String
  image        String
  description  String
  price        Float
  published    Boolean?    @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  collectionId String?
  erased       Boolean?    @default(false)
  collection   Collection? @relation(fields: [collectionId], references: [id])
  creator      User        @relation("UserNftsCreated", fields: [creatorId], references: [id])
  owner        User        @relation("UserNftsOwned", fields: [ownerId], references: [id])
  comments     Comment[]
  wishedBy     WishList[]
  categories   Category[]  @relation("CategoriesOnNft")
  likedBy      User[]      @relation("UserLikedNfts")
  viewedBy     User[]      @relation("UserViewedNfts")
}

model Category {
  id    String  @id @default(cuid())
  name  String
  image String?
  nfts  Nft[]   @relation("CategoriesOnNft")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  image       String?
  description String?
  discount    Float
  creatorId   String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  price       Float?
  erased      Boolean? @default(false)
  published   Boolean? @default(false)
  creator     User     @relation("UserCollectionsCreated", fields: [creatorId], references: [id])
  owner       User     @relation("UserCollectionsOwned", fields: [ownerId], references: [id])
  nfts        Nft[]
}

model WishList {
  userId String
  nftId  String
  nft    Nft    @relation(fields: [nftId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, nftId])
}

model Comment {
  id          String   @id @default(cuid())
  nftId       String
  userId      String
  isPublished Boolean  @default(true)
  content     String
  createdAt   DateTime @default(now())
  nft         Nft      @relation(fields: [nftId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Buys {
  buyId     String   @id
  userId    String
  date      String
  coins     Int
  status    String
  amount    Float    @db.Real
  createdAt DateTime @default(now())
}

model BuyNfts {
  nftsId        String   @id
  compradorId   String
  vendedorId    String
  coins         Float
  createdAt     DateTime @default(now())
  nameComprador String?
  nameVendedor  String?
}

model Notify {
  id              String   @id @default(cuid())
  userId          String
  typeNotify      String
  ordenId         String?
  nameUser        String?
  nftId           String?
  nameNft         String?
  creatorNft      String?
  compradorId     String?
  nameComprador   String?
  vendedorId      String?
  nameVendedor    String?
  coins           Float?
  amount          Float?
  status          String?
  userIdComment   String?
  nameUserComment String?
  comment         String?
  owner           String?
  ownerId         String?
  view            Boolean  @default(false)
  userIdLiked     String?
  nameUserLiked   String?
  createdAt       DateTime @default(now())
}
