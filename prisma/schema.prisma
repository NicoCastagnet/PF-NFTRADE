generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  passwordHash       String?
  coins              Float?       @default(0)
  accounts           Account[]
  collectionsCreated Collection[] @relation("UserCollectionsCreated")
  collectionsOwned   Collection[] @relation("UserCollectionsOwned")
  nftsCreated        Nft[]        @relation("UserNftsCreated")
  nftsOwned          Nft[]        @relation("UserNftsOwned")
  sessions           Session[]
  wishes             WishList[]
  likes              Nft[]        @relation("UserLikedNfts")
  views              Nft[]        @relation("UserViewedNfts")
  comments           Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Nft {
  id           String      @id @default(cuid())
  creatorId    String
  ownerId      String
  name         String
  image        String
  description  String
  price        Float
  published    Boolean?    @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  creator      User        @relation("UserNftsCreated", fields: [creatorId], references: [id])
  owner        User        @relation("UserNftsOwned", fields: [ownerId], references: [id])
  wishedBy     WishList[]
  categories   Category[]  @relation("CategoriesOnNft")
  likedBy      User[]      @relation("UserLikedNfts")
  viewedBy     User[]      @relation("UserViewedNfts")
  comments     Comment[]
}

model Category {
  id    String  @id @default(cuid())
  name  String
  image String?
  nfts  Nft[]   @relation("CategoriesOnNft")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  image       String?
  description String?
  disccount   Float
  creatorId   String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation("UserCollectionsCreated", fields: [creatorId], references: [id])
  owner       User     @relation("UserCollectionsOwned", fields: [ownerId], references: [id])
  nfts        Nft[]
}

model WishList {
  userId String
  nftId  String
  nft    Nft    @relation(fields: [nftId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, nftId])
}

model Comment {
  id          String   @id @default(cuid())
  nft         Nft      @relation(fields: [nftId], references: [id])
  nftId       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  isPublished Boolean  @default(true)
  content     String
  createdAt   DateTime @default(now())
}
model Buys {
  buyId  String   @id
  userId String
  date   String
  coins  Int
  status String
  amount Int
  createdAt   DateTime @default(now())
}